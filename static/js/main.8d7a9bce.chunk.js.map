{"version":3,"sources":["logo.svg","Header/Header.js","FrequencyInput/FrequencyInput.js","Result/Result.js","functions/pitch-calculator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","target","rel","href","FrequencyInput","changeInputType","frequencyInput","frequency","handleInputChange","pitchName","numberOfPartials","calculate","Form","key","Check","checked","value","name","onChange","custom","inline","label","type","id","InputGroup","Prepend","Text","FormControl","placeholder","aria-label","aria-describedby","e","Button","onClick","Result","partials","map","partial","index","pitch","pitchClass","octave","deviation","calculateFrequencyFromNotation","note","noteSegments","Array","from","letter","shift","toUpperCase","accidental","octaveSemitones","join","semitonesAway","getBaseSemitones","getAccidentalSemitones","Math","pow","toFixed","producePartials","i","newVal","push","calculateNotationFromFrequency","getDeviation","splice","length","console","log","numberSemitonesAwayFrom440","roundedSemitonesAway","round","getPitchClass","keepAboveTwelve","stepOne","floor","indexOf","getOctave","notation","noteString","split","closestTempered","calc","App","props","setState","convert","state","calculatePartials","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8d7a9bce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nconst Header = ({}) => {\n  return (\n    <>\n      <header className=\"header\">\n        <h1>Harmonic Series Pitch Calculator</h1>\n        <div className=\"header__description\">\n          <p>\n            This tool will take a given pitch, provided in either Hz or{\" \"}\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=\"https://en.wikipedia.org/wiki/Scientific_pitch_notation\"\n            >\n              scientific pitch notation,\n            </a>{\" \"}\n            and calculate the pitches in its harmonic series. The output pitches\n            are given as frequencies in Hz, along with their closest equal\n            tempered pitches and their deviation from these pitches in cents.\n          </p>\n        </div>\n      </header>\n    </>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { InputGroup, FormControl, Form, Button } from \"react-bootstrap\";\n\nconst FrequencyInput = ({\n  changeInputType,\n  frequencyInput,\n  frequency,\n  handleInputChange,\n  pitchName,\n  numberOfPartials,\n  calculate\n}) => {\n  return (\n    <>\n      <Form className=\"user-frequency-input\">\n        <p>Provide fundamental pitch as: </p>\n        <div key={`custom-inline-radio`} className=\"mb-3\">\n          <Form.Check\n            checked={frequencyInput}\n            value={frequencyInput}\n            name=\"inputType\"\n            onChange={() => changeInputType(true)}\n            custom\n            inline\n            label=\"Frequency\"\n            type=\"radio\"\n            id={`custom-inline-radio-1`}\n          />\n          <Form.Check\n            name=\"inputType\"\n            checked={!frequencyInput}\n            value={frequencyInput}\n            onChange={() => changeInputType(false)}\n            custom\n            inline\n            label=\"Scientific notation\"\n            type=\"radio\"\n            id={`custom-inline-radio-2`}\n          />\n        </div>\n\n        <div className=\"frequency-input\">\n          {frequencyInput && (\n            <InputGroup className=\"mb-3 user-input\">\n              <InputGroup.Prepend>\n                <InputGroup.Text id=\"frequency-input\">\n                  Frequency (Hz)\n                </InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl\n                placeholder=\"e.g. 55\"\n                aria-label=\"frequency input\"\n                aria-describedby=\"frequency-input\"\n                value={frequency}\n                onChange={e => handleInputChange(\"frequency\", e)}\n              />\n            </InputGroup>\n          )}\n          {!frequencyInput && (\n            <InputGroup className=\"mb-3\">\n              <InputGroup.Prepend>\n                <InputGroup.Text id=\"scientific-input\">\n                  Pitch Name\n                </InputGroup.Text>\n              </InputGroup.Prepend>\n              <FormControl\n                placeholder=\"e.g. A1\"\n                aria-label=\"notation input\"\n                aria-describedby=\"notation-input\"\n                value={pitchName}\n                onChange={e => handleInputChange(\"pitchName\", e)}\n              />\n            </InputGroup>\n          )}\n          <p>Provide number of partials to display (max. 256): </p>\n          <InputGroup className=\"mb-3\">\n            <InputGroup.Prepend>\n              <InputGroup.Text id=\"partial-input\">Partials</InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n              aria-label=\"number of partials\"\n              value={numberOfPartials}\n              onChange={e => handleInputChange(\"partials\", e)}\n            />\n          </InputGroup>\n\n          <Button onClick={calculate}>Calculate</Button>\n        </div>\n      </Form>\n    </>\n  );\n};\n\nexport default FrequencyInput;\n","import React from \"react\";\n\nconst Result = ({ partials }) => {\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>Partial Number</th>\n          <th>Frequency (Hz)</th>\n          <th>Closest Tempered Pitch</th>\n          <th>Deviation from Tempered Pitch (cents)</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {partials.map((partial, index) => (\n          <tr>\n            <td>{index + 1}</td>\n            <td>{partial.frequency}</td>\n            <td>\n              {partial.pitch.pitchClass}\n              <sub>{partial.pitch.octave}</sub>\n            </td>\n            <td>{partial.deviation}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default Result;\n","export const calculateFrequencyFromNotation = note => {\n  const noteSegments = Array.from(note);\n\n  const letter = noteSegments.shift().toUpperCase();\n\n  let accidental = \"\";\n\n  if (noteSegments[0] === \"#\" || noteSegments[0] === \"b\") {\n    accidental = noteSegments.shift();\n  }\n\n  const octave = noteSegments.join(\"\");\n\n  const getBaseSemitones = () => {\n    switch (letter) {\n      case \"B\":\n        return 2;\n      case \"C\":\n        return -9;\n      case \"D\":\n        return -7;\n      case \"E\":\n        return -5;\n      case \"F\":\n        return -4;\n      case \"G\":\n        return -2;\n      case \"A\":\n        return 0;\n    }\n  };\n\n  const getAccidentalSemitones = () => {\n    switch (accidental) {\n      case \"#\":\n        return 1;\n      case \"b\":\n        return -1;\n      default:\n        return 0;\n    }\n  };\n\n  const octaveSemitones = (octave - 4) * 12;\n\n  const semitonesAway =\n    getBaseSemitones() + getAccidentalSemitones() + octaveSemitones;\n\n  const calculation = Math.pow(Math.pow(2, 1 / 12), semitonesAway) * 440;\n\n  return calculation.toFixed(5);\n};\n\nexport const producePartials = (frequency, numberOfPartials) => {\n  //calculation to produce partials\n  let partials = [];\n  for (let i = 0; i <= numberOfPartials; i += 1) {\n    let newVal = frequency * i;\n    partials.push({\n      frequency: newVal,\n      pitch: calculateNotationFromFrequency(newVal),\n      deviation: getDeviation(newVal)\n    });\n  }\n  const allPartials = partials.splice(1, partials.length - 1);\n\n  return allPartials;\n};\n\nconst calculateNotationFromFrequency = frequency => {\n  console.log(\"calculation starts, frequency: \", frequency);\n  let numberSemitonesAwayFrom440 =\n    (12 / Math.log(2)) * Math.log(frequency / 440);\n\n  let roundedSemitonesAway = Math.round(numberSemitonesAwayFrom440) % 12;\n\n  const getPitchClass = () => {\n    const keepAboveTwelve =\n      roundedSemitonesAway < 0\n        ? roundedSemitonesAway + 12\n        : roundedSemitonesAway;\n\n    console.log(\"keep above twelve gives: \", keepAboveTwelve);\n    switch (keepAboveTwelve) {\n      case 12:\n        return \"A\";\n      case 1:\n        return \"A#/Bb\";\n      case 2:\n        return \"B\";\n      case 3:\n        return \"C\";\n      case 4:\n        return \"C#/Db\";\n      case 5:\n        return \"D\";\n      case 6:\n        return \"D#/Eb\";\n      case 7:\n        return \"E\";\n      case 8:\n        return \"F\";\n      case 9:\n        return \"F#/Gb\";\n      case 10:\n        return \"G\";\n      case 11:\n        return \"G#/Ab\";\n      default:\n        return \"A+\";\n    }\n  };\n  const getOctave = () => {\n    const pitchClass = getPitchClass();\n\n    let stepOne = Math.floor(numberSemitonesAwayFrom440 / 12) + 4;\n\n    console.log(\"pitchClass\", pitchClass);\n    console.log(\"stepOne returns \", stepOne);\n\n    const addOneConditions = [\"A+\", \"A#/Bb\", \"B\"];\n\n    if (addOneConditions.indexOf(pitchClass) !== -1) {\n      return stepOne;\n    }\n\n    return stepOne + 1;\n  };\n\n  let pitchClass = getPitchClass() === \"A+\" ? \"A\" : getPitchClass();\n\n  return { pitchClass, octave: getOctave() };\n};\n\nconst getDeviation = frequency => {\n  const notation = calculateNotationFromFrequency(frequency);\n  const noteString = notation.pitchClass.split(\"/\")[0] + notation.octave;\n  const closestTempered = calculateFrequencyFromNotation(noteString);\n\n  let calc = (1200 / Math.log(2)) * Math.log(frequency / closestTempered);\n  return calc === 0 ? calc : calc.toFixed(2);\n};\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Header from \"./Header/Header\";\nimport FrequencyInput from \"./FrequencyInput/FrequencyInput\";\nimport Result from \"./Result/Result\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {\n  calculateFrequencyFromNotation,\n  producePartials\n} from \"./functions/pitch-calculator\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      frequencyInput: true,\n      frequency: \"\",\n      numberOfPartials: 32,\n      pitchName: \"\",\n      partials: []\n    };\n  }\n\n  changeInputType = value => {\n    this.setState({\n      frequencyInput: value\n    });\n  };\n\n  handleInputChange = (type, e) => {\n    switch (type) {\n      case \"frequency\": {\n        return this.setState({ frequency: e.target.value, pitchName: \"\" });\n      }\n      case \"pitchName\": {\n        return this.setState({ pitchName: e.target.value, frequency: \"\" });\n      }\n      case \"partials\":\n        return this.setState({\n          numberOfPartials: e.target.value\n        });\n    }\n  };\n\n  convert = () => {\n    console.log(\"convert ran\");\n    const frequency = calculateFrequencyFromNotation(this.state.pitchName);\n    const partials = producePartials(frequency, this.state.numberOfPartials);\n\n    console.log(\n      \"partials produced\",\n      producePartials(\n        calculateFrequencyFromNotation(this.state.pitchName),\n        this.state.numberOfPartials\n      )\n    );\n    this.setState({\n      frequency,\n      partials\n    });\n  };\n\n  calculatePartials = () => {\n    console.log(\"calculatePartials ran\");\n    console.log(\n      producePartials(this.state.frequency, this.state.numberOfPartials)\n    );\n\n    const partials = producePartials(\n      this.state.frequency,\n      this.state.numberOfPartials\n    );\n\n    this.setState({\n      partials\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <FrequencyInput\n          changeInputType={this.changeInputType}\n          frequencyInput={this.state.frequencyInput}\n          frequency={this.state.frequency}\n          pitchName={this.state.pitchName}\n          handleInputChange={this.handleInputChange}\n          numberOfPartials={this.state.numberOfPartials}\n          calculate={\n            this.state.frequencyInput ? this.calculatePartials : this.convert\n          }\n        />\n        {this.state.partials !== [] && (\n          <Result partials={this.state.partials} />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}